package org.orbisgis.osm.utils

import java.text.SimpleDateFormat

/**
 * Running query on the Overpass server.
 */
class RunningQuery {

    /** PID of the running query. */
    int pid
    /** Memory space limit for the data generated by the query. */
    long spaceLimit
    /** Timeout for the query execution. */
    int timeLimit
    /** {@linkl Data} when the query execution has started. */
    Date startTime

    /** {@link SimpleDateFormat} used to parse dates. */
    private format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.ENGLISH)
    private local = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.FRANCE)

    /**
     * Main constructor.
     * @param text {@link String} representation of the query.
     */
    RunningQuery(String text){
        format.setTimeZone(TimeZone.getTimeZone("Etc/GMT+0"))
        local.setTimeZone(TimeZone.getDefault())
        def array = text.split()
        pid = Integer.decode(array[0])
        spaceLimit = Integer.decode(array[1])
        timeLimit = Integer.decode(array[2])
        startTime = format.parse(array[3])
    }

    /**
     * Get the number of second to wait for the query timeout since the given {@link Date}.
     * @param current {@link Date} use as reference.
     * @return Number of seconds to wait .
     */
    long getWaitSeconds(Date current){
        return timeLimit - startTime.toInstant().secondsUntil(current.toInstant())
    }

    /**
     * Get the number of second to wait for the query timeout since the current {@link Date}.
     * @return Number of seconds to wait .
     */
    long getWaitSeconds(){
        return getWaitSeconds(Date.newInstance())
    }

    @Override
    String toString(){
        return "$pid\t$spaceLimit\t$timeLimit\t${local.format(startTime)}"
    }
}
